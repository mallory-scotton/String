///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2024 Mallory SCOTTON
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma once
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <utility>
#include <cstdlib>
#include <cstring>

///////////////////////////////////////////////////////////////////////////////
/// \brief Safely deletes a dynamically allocated object and sets the pointer
/// to `nullptr` to prevent dangling pointers.
///
/// This macro ensures that after an object is deleted, the pointer is
/// immediately set to `nullptr`, reducing the risk of accidental dereferencing
/// of freed memory.
///
/// \param x Pointer to the object to be deleted.
///
///////////////////////////////////////////////////////////////////////////////
#define SafeDelete(x) { delete x; x = nullptr; }

///////////////////////////////////////////////////////////////////////////////
/// \brief Safely deletes a dynamically allocated array and sets the pointer
/// to `nullptr` to prevent dangling pointers.
///
/// Similar to `SafeDelete`, this macro deletes a dynamically allocated array
/// (created using `new[]`) and sets the pointer to `nullptr` to ensure that
/// the pointer cannot be used after deletion, avoiding potential errors.
///
/// \param x Pointer to the array to be deleted.
///
///////////////////////////////////////////////////////////////////////////////
#define SafeDeleteArray(x) { delete[] x; x = nullptr; }

namespace Ax
{

///////////////////////////////////////////////////////////////////////////////
/// \brief A simplified string class for managing and manipulating C-style
/// character arrays.
///
/// This `String` class provides dynamic memory management for a character
/// array, handling allocation, reallocation, and capacity growth as the string
/// expands. It also includes basic types for managing string size and special
/// constants like `npos` for indicating "no position".
///
///////////////////////////////////////////////////////////////////////////////
class TString
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Member data.
    ///
    ///////////////////////////////////////////////////////////////////////////
    using sizeType = size_t;        //<! Type alias for string size type.
    static const size_t npos = -1;  //<! The largest possible value.

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Private member data.
    ///
    ///////////////////////////////////////////////////////////////////////////
    char* _str = nullptr;       //<! Pointer to the character array.
    size_t _strLen = 0;         //<! Length of the string.
    size_t _strCap = 0;         //<! Capacity of the string.
    size_t _increaseBy = 15;    //<! Increment size for capacity growth.

    ///////////////////////////////////////////////////////////////////////////
    /// \brief A structure used for iterating over the string.
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct StringIteratorType
    {
        ///////////////////////////////////////////////////////////////////////
        /// \brief Member data.
        ///
        /// This iterator type helps manage iteration over the characters of
        /// the string, keeping track of the current position and reference
        /// to the size.
        ///
        ///////////////////////////////////////////////////////////////////////
        char* first;        //<! Pointer to the first character in the string.
        const size_t* size; //<! Pointer to the size of the string.
        sizeType pos;       //<! Current position in the string.

        ///////////////////////////////////////////////////////////////////////
        /// \brief Default constructor.
        ///
        /// Initializes the iterator with the given parameters, or with default
        /// values if none are provided.
        ///
        /// \param f Pointer to the first character.
        /// \param s Pointer to the size of the string.
        /// \param p Current position in the string.
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIteratorType (char* f = nullptr, const size_t* s = nullptr,
            sizeType p = 0) : first(f), size(s), pos(p) {}
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief ConstIterator class for iterating over the String object.
    ///
    /// This class provides a way to access and traverse the characters in a
    /// String object in a constant manner, ensuring that the underlying data
    /// remains unmodified during iteration.
    ///
    ///////////////////////////////////////////////////////////////////////////
    class ConstIterator
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief Default constructor for ConstIterator.
        ///
        /// Initializes an empty ConstIterator that does not point to any valid
        /// data.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Constructs a ConstIterator from a StringIteratorType.
        ///
        /// \param p The StringIteratorType that specifies the starting
        /// position of the iterator in the String object.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator(StringIteratorType p);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Dereference operator to access the character at the current
        /// iterator position.
        ///
        /// Provides constant access to the character pointed by the iterator.
        ///
        /// \return A constant reference to the character.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator*(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subscript operator to access a character at an offset from
        /// the current iterator position.
        ///
        /// \param Index Offset from the current iterator position.
        ///
        /// \return A constant reference to the character at the specified
        /// offset.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](int Index) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-increment operator to move the iterator to the next
        /// position.
        ///
        /// Advances the iterator to the next character in the String.
        ///
        /// \return A reference to the incremented iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator& operator++(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-increment operator to move the iterator to the next
        /// position.
        ///
        /// Advances the iterator to the next character, but returns a copy of
        /// the iterator before the increment.
        ///
        /// \return A copy of the iterator before the increment.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator operator++(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-decrement operator to move the iterator to the previous
        /// position.
        ///
        /// Moves the iterator to the previous character in the String.
        ///
        /// \return A reference to the decremented iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator& operator--(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-decrement operator to move the iterator to the previous
        /// position.
        ///
        /// Moves the iterator to the previous character but returns a copy of
        /// the iterator before the decrement.
        ///
        /// \return A copy of the iterator before the decrement.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator operator--(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Equality operator to compare two iterators.
        ///
        /// Compares two ConstIterator objects for equality based on their
        /// current positions.
        ///
        /// \param rhs The iterator to compare with.
        ///
        /// \return True if both iterators are at the same position, otherwise
        /// false.
        ///
        ///////////////////////////////////////////////////////////////////////
        bool operator==(const ConstIterator& rhs) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Inequality operator to compare two iterators.
        ///
        /// Compares two ConstIterator objects for inequality.
        ///
        /// \param rhs The iterator to compare with.
        ///
        /// \return True if the iterators are at different positions, otherwise
        /// false.
        ///
        ///////////////////////////////////////////////////////////////////////
        bool operator!=(const ConstIterator& rhs) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Addition operator to move the iterator forward by a given
        /// number of positions.
        ///
        /// \param i The number of positions to move forward.
        ///
        /// \return A new iterator advanced by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator operator+(sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subtraction operator to move the iterator backward by a
        /// given number of positions.
        ///
        /// \param i The number of positions to move backward.
        ///
        /// \return A new iterator moved back by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstIterator operator-(sizeType i);

    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief Protected member data.
        ///
        ///////////////////////////////////////////////////////////////////////
        StringIteratorType current; //<! Current iterator state.

        ///////////////////////////////////////////////////////////////////////
        /// \brief Retrieve the character at the current iterator position.
        ///
        /// \return A reference to the character at the iterator's current
        /// position.
        ///
        ///////////////////////////////////////////////////////////////////////
        char& retrieve(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Increment the current position of the iterator.
        ///
        /// Moves the iterator to the next character.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Decrement the current position of the iterator.
        ///
        /// Moves the iterator to the previous character.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Access a character at a specific offset from the current
        /// iterator position.
        ///
        /// \param i The offset from the current position.
        ///
        /// \return A reference to the character at the offset.
        ///
        ///////////////////////////////////////////////////////////////////////
        char& _randomAccess(sizeType i) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Add a given number of positions to the iterator.
        ///
        /// \param toReturn Reference to the iterator to modify.
        /// \param i Number of positions to add.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _add(ConstIterator& toReturn, sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subtract a given number of positions from the iterator.
        ///
        /// \param toReturn Reference to the iterator to modify.
        /// \param i Number of positions to subtract.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _subtract(ConstIterator& toReturn, sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief String class is a friend, allowing it access to private
        /// members of ConstIterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        friend class TString;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Iterator class for modifying the String object.
    ///
    /// This class allows iterating over a String object and modifying its
    /// characters. It inherits from the `ConstIterator` class, providing the
    /// same functionality with additional write access to the elements.
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Iterator : public ConstIterator
    {
        ///////////////////////////////////////////////////////////////////////
        /// \brief Alias for the base class (ConstIterator).
        ///
        ///////////////////////////////////////////////////////////////////////
        using _myBase = ConstIterator;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Grants access to private members of the Iterator to the
        /// String class.
        ///
        ///////////////////////////////////////////////////////////////////////
        friend class TString;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief Default constructor for Iterator.
        ///
        /// Constructs an Iterator object with no valid position.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Constructs an Iterator from a StringIteratorType.
        ///
        /// \param p The StringIteratorType representing the starting position
        /// of the iterator in the String.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator(StringIteratorType p);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Dereference operator to access the character at the current
        /// iterator position with write access.
        ///
        /// Allows modifying the character pointed by the iterator.
        ///
        /// \return A reference to the character at the current iterator
        /// position.
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator*(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Dereference operator to access the character at the current
        /// iterator position with read-only access.
        ///
        /// Provides constant access to the character at the iterator's
        /// position.
        ///
        /// \return A constant reference to the character.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator*(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subscript operator to access a character at an offset from
        /// the current iterator position with write access.
        ///
        /// Allows modifying the character at the specified offset.
        ///
        /// \param Index Offset from the current iterator position.
        ///
        /// \return A reference to the character at the specified offset.
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](int Index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subscript operator to access a character at an offset from
        /// the current iterator position with read-only access.
        ///
        /// Provides constant access to the character at the specified offset.
        ///
        /// \param Index Offset from the current iterator position.
        ///
        /// \return A constant reference to the character at the specified
        /// offset.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[] (int Index) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-increment operator to move the iterator to the next
        /// position.
        ///
        /// Advances the iterator to the next character in the String and allows
        /// write access.
        ///
        /// \return A reference to the incremented iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator& operator++(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-increment operator to move the iterator to the next
        /// position.
        ///
        /// Advances the iterator to the next character, but returns a copy of
        /// the iterator before the increment. Provides write access.
        ///
        /// \return A copy of the iterator before the increment.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator operator++(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-decrement operator to move the iterator to the previous
        /// position.
        ///
        /// Moves the iterator to the previous character in the String and
        /// allows write access.
        ///
        /// \return A reference to the decremented iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator& operator--(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-decrement operator to move the iterator to the previous
        /// position.
        ///
        /// Moves the iterator to the previous character but returns a copy of
        /// the iterator before the decrement. Provides write access.
        ///
        /// \return A copy of the iterator before the decrement.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator operator--(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Addition operator to move the iterator forward by a given
        /// number of positions.
        ///
        /// Advances the iterator by the specified number of positions,
        /// allowing write access to the characters.
        ///
        /// \param i The number of positions to move forward.
        ///
        /// \return A new iterator advanced by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator operator+(sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subtraction operator to move the iterator backward by a
        /// given number of positions.
        ///
        /// Moves the iterator backward by the specified number of positions,
        /// allowing write access to the characters.
        ///
        /// \param i The number of positions to move backward.
        ///
        /// \return A new iterator moved back by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        Iterator operator-(sizeType i);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Typedefs for convenience.
    ///
    ///////////////////////////////////////////////////////////////////////////
    using ConstPointer = ConstIterator;
    using Pointer = Iterator;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief ConstReverseIterator class for reverse traversal of a String
    /// object.
    ///
    /// This class provides functionality to iterate over a String object in
    /// reverse order. It extends the `ConstIterator` class and offers
    /// read-only access to the characters during reverse traversal.
    ///
    ///////////////////////////////////////////////////////////////////////////
    class ConstReverseIterator : public ConstIterator
    {
        ///////////////////////////////////////////////////////////////////////
        /// \brief Alias for the base class (ConstIterator).
        ///
        ///////////////////////////////////////////////////////////////////////
        using _myBase = ConstIterator;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Grants access to private members of the ConstReverseIterator
        /// to the String class.
        ///
        ///////////////////////////////////////////////////////////////////////
        friend class TString;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief Default constructor for ConstReverseIterator.
        ///
        /// Constructs a reverse iterator with no valid position.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Constructs a reverse iterator from a StringIteratorType.
        ///
        /// \param p The StringIteratorType representing the starting position
        /// of the reverse iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator(StringIteratorType p);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Dereference operator to access the character at the current
        /// reverse iterator position with read-only access.
        ///
        /// Provides constant access to the character at the iterator's
        /// position during reverse traversal.
        ///
        /// \return A constant reference to the character.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator*(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subscript operator to access a character at an offset from
        /// the current reverse iterator position with read-only access.
        ///
        /// Provides constant access to the character at the specified offset
        /// during reverse traversal.
        ///
        /// \param Index Offset from the current iterator position.
        ///
        /// \return A constant reference to the character at the specified
        /// offset.
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[] (int Index) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-increment operator to move the reverse iterator to the
        /// next position (previous character in the string).
        ///
        /// Advances the iterator to the next character in reverse order.
        ///
        /// \return A reference to the incremented reverse iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator& operator++(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-increment operator to move the reverse iterator to the
        /// next position (previous character in the string).
        ///
        /// Advances the reverse iterator to the next character in reverse
        /// order, but returns a copy of the iterator before the increment.
        ///
        /// \return A copy of the reverse iterator before the increment.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator operator++(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Pre-decrement operator to move the reverse iterator to the
        /// previous position (next character in the string).
        ///
        /// Moves the reverse iterator to the previous character in reverse
        /// order.
        ///
        /// \return A reference to the decremented reverse iterator.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator& operator--(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Post-decrement operator to move the reverse iterator to the
        /// previous position (next character in the string).
        ///
        /// Moves the reverse iterator to the previous character in reverse
        /// order, but returns a copy of the iterator before the decrement.
        ///
        /// \return A copy of the reverse iterator before the decrement.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator operator--(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Addition operator to move the reverse iterator forward by a
        /// given number of positions (backward in the string).
        ///
        /// Advances the reverse iterator by the specified number of positions,
        /// allowing read-only access to the characters.
        ///
        /// \param i The number of positions to move forward in reverse order.
        ///
        /// \return A new reverse iterator advanced by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator operator+(sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subtraction operator to move the reverse iterator backward
        /// by a given number of positions (forward in the string).
        ///
        /// Moves the reverse iterator backward by the specified number of
        /// positions, allowing read-only access to the characters.
        ///
        /// \param i The number of positions to move backward in reverse order.
        ///
        /// \return A new reverse iterator moved back by `i` positions.
        ///
        ///////////////////////////////////////////////////////////////////////
        ConstReverseIterator operator-(sizeType i);

    protected:
        ///////////////////////////////////////////////////////////////////////
        /// \brief Increments the current position of the reverse iterator.
        ///
        /// Moves the iterator one step forward (backward in the string).
        ///
        ///////////////////////////////////////////////////////////////////////
        void _increment(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Decrements the current position of the reverse iterator.
        ///
        /// Moves the iterator one step backward (forward in the string).
        ///
        ///////////////////////////////////////////////////////////////////////
        void _decrement(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Adds a specified number of positions to a reverse iterator.
        ///
        /// Modifies the provided iterator by advancing it by `i` positions.
        ///
        /// \param toReturn The iterator to be modified.
        /// \param i The number of positions to add.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _add(ConstReverseIterator& toReturn, sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief Subtracts a specified number of positions from a reverse
        /// iterator.
        ///
        /// Modifies the provided iterator by moving it back by `i` positions.
        ///
        /// \param toReturn The iterator to be modified.
        /// \param i The number of positions to subtract.
        ///
        ///////////////////////////////////////////////////////////////////////
        void _subtract(ConstReverseIterator& toReturn, sizeType i);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class ReverseIterator : public ConstReverseIterator
    {
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        using _myBase = ConstReverseIterator;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        friend class TString;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator(StringIteratorType p);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator*(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator*(void) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        char& operator[](int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        const char& operator[](int) const;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator& operator++(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator operator++(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator& operator--(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator operator--(int);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator operator+(sizeType i);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        ReverseIterator operator-(sizeType i);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    using ConstReversePointer = ConstReverseIterator;
    using ReversePointer = ReverseIterator;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param Len
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(const TString& Other, sizeType Pos, size_t Len = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(TString&& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(const char* Other, size_t Len);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Len
    /// \param Filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(size_t Len, char Filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param First
    /// \param Second
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString(const ConstIterator First, const ConstIterator Second);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator Begin(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator Begin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator End(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator End(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator CBegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstIterator CEnd(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ReverseIterator RBegin(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator RBegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ReverseIterator REnd(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator REnd(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator CRBegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ConstReverseIterator CREnd(void) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIteratorType _iBegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIteratorType _rBegin(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline StringIteratorType _end(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param First
    /// \param Second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t _getLength(const ConstIterator First, const ConstIterator Second);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& operator=(const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& operator=(TString&& Other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~TString(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator==(const TString& A, const TString& B);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator!=(const TString& A, const TString& B);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator<(const TString& A, const TString& B);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator>(const TString& A, const TString& B);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator<=(const TString& A, const TString& B);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    friend bool operator>=(const TString& A, const TString& B);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param rhs
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int _compare(const TString& rhs) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& operator[](sizeType Index) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& operator[](sizeType Index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& At(sizeType Index) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& At(sizeType Index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& Front(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& Front(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char& Back(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    char& Back(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& operator+=(const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& operator+=(const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& operator+=(char Ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(const TString& Str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    /// \param SubPos
    /// \param SubLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(const TString& Str, sizeType SubPos, size_t SubLen = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(const char* Str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    /// \param Len
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(const char* Str, size_t Len);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Len
    /// \param Filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(sizeType Len, char Filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param First
    /// \param Second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Append(const ConstIterator First, const ConstIterator Second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& PushBack(char Ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Insert(sizeType Pos, const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    /// \param SubPos
    /// \param SubLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Insert(sizeType Pos, const TString& Other, sizeType SubPos,
        size_t SubLen);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Insert(sizeType Pos, const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    /// \param Len
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Insert(sizeType Pos, const char* Other, size_t Len);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Insert(sizeType Pos, size_t Len, char Filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ptr
    /// \param Len
    /// \param Ch
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Insert(Iterator Ptr, size_t Len, char Ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ptr
    /// \param Ch
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator Insert(Iterator Ptr, char Ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ptr
    /// \param First
    /// \param Last
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Insert(Iterator Ptr, const ConstIterator First,
        const ConstIterator Last);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Erase(sizeType Pos = 0, size_t Len = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ptr
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator Erase(ConstIterator Ptr);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param First
    /// \param Last
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Iterator Erase(ConstIterator First, ConstIterator Last);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(sizeType Pos, size_t Len, const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param It1
    /// \param It2
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(ConstIterator It1, ConstIterator It2, const TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Other
    /// \param SubPos
    /// \param SubLen
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(sizeType Pos, size_t Len, const TString& Other,
        sizeType SubPos, size_t SubLen = npos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Str
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(sizeType Pos, size_t Len, const char* Str);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param It1
    /// \param It2
    /// \param Other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(ConstIterator It1, ConstIterator It2, const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Other
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(sizeType Pos, size_t Len, const char* Other, size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param It1
    /// \param It2
    /// \param Other
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(ConstIterator It1, ConstIterator It2, const char* Other,
        size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param n
    /// \param Filler
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(sizeType Pos, size_t Len, size_t n, char Filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param It1
    /// \param It2
    /// \param n
    /// \param Ch
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(ConstIterator It1, ConstIterator It2, sizeType n, char Ch);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param It1
    /// \param It2
    /// \param First
    /// \param Second
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Replace(ConstIterator It1, ConstIterator It2, ConstIterator First,
        ConstIterator Second);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Swap(TString& Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& PopBack(void);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline void _append(const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _append(const char* Other, size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _insertstr(sizeType Pos, const char* Other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Other
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _insertstr(sizeType Pos, const char* Other, size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Buffer
    /// \param Other
    /// \param Pos
    /// \param Len
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _substr(char*& Buffer, const char* Other, sizeType Pos = 0, size_t
        Len = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Size
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _erase(sizeType Pos, size_t Size);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    /// \param Other
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _replace(sizeType Pos, size_t Len, const char* Other, size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    /// \param Pos
    /// \param Len
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t _getLength(const TString& Str, sizeType Pos,
        size_t Len = npos) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const char* CStr(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Str
    /// \param Len
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t Copy(char* Str, size_t Len, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType Find(const TString& Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType Find(const char* Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType Find(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType Find(char Ch, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType RFind(const TString& Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType RFind(const char* Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType RFind(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType RFind(char Ch, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstOf(const TString& Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstOf(const char* Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstOf(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstOf(char Ch, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastOf(const TString& Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastOf(const char* Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastOf(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastOf(char Ch, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstNotOf(const TString& Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstNotOf(const char* Other, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstNotOf(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindFirstNotOf(char Ch, sizeType Pos = 0) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastNotOf(const TString& Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastNotOf(const char* Other, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Pos
    /// \param n
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastNotOf(const char* Other, sizeType Pos, sizeType n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Ch
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType FindLastNotOf(char Ch, sizeType Pos = npos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    /// \param Len
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString SubStr(sizeType Pos = 0, size_t Len = npos) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType _find(const char* Other, size_t Len, sizeType Pos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType _rfind(const char* Other, size_t Len, sizeType Pos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool _findCompare(const char* Other, size_t Len, sizeType Pos) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    /// \param IsTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType _findFirstOf(const char* Other, size_t Len, sizeType Pos,
        bool IsTrue) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    /// \param IsTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sizeType _findLastOf(const char* Other, size_t Len, sizeType Pos,
        bool IsTrue) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    /// \param IsTrue
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool _findOfCompare(const char* Other, size_t Len, sizeType Pos,
        bool IsTrue) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t Length(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline size_t Size(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t MaxSize(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Resize(size_t n);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param n
    /// \param Filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Resize(sizeType n, char Filler);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    size_t Capacity(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Reserve(size_t n = 0);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Clear(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ShrinkToFit(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& ToLowerCase(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& ToUpperCase(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    TString& Trim(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsEmpty(void) const;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Len
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _setLength(const size_t Len);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Cap
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _setCapacity(const size_t Cap);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Cap
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _increaseCapacity(const size_t Cap);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Cap
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _decreaseCapacity(const size_t Cap);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Buffer
    /// \param n
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& Buffer, const size_t n) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Buffer
    /// \param n
    /// \param Filler
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& Buffer, const size_t n, char Filler) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Buffer
    /// \param n
    /// \param It1
    /// \param It2
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _allocCString(char*& Buffer, const size_t n, const ConstIterator It1,
        const ConstIterator It2) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Other
    /// \param Len
    /// \param Pos
    /// \param Ch
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _fillStr(char* Other, const size_t Len, sizeType Pos, char Ch) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Pos
    ///
    ///////////////////////////////////////////////////////////////////////////
    void _clearStr(const sizeType Pos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param Func
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename F>
    TString& _transform(F Func);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param A
    /// \param B
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Swap(TString& A, TString& B);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    operator std::string(void) const;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param Lhs
/// \param Rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TString operator+(const TString& Lhs, const TString& Rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param Lhs
/// \param Rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TString operator+(const TString& Lhs, const char* Rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param Lhs
/// \param Rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TString operator+(const char* Lhs, const TString& Rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param Lhs
/// \param Rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TString operator+(const TString& Lhs, char Rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param Lhs
/// \param Rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TString operator+(char Lhs, const TString& Rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param os
/// \param Str
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const TString& Str);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param is
/// \param Str
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::ostream& operator>>(std::ostream& is, TString& Str);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param is
/// \param Str
/// \param Delim
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
std::istream& getline(std::istream is, TString& Str, char Delim = '\n');

} // namespace Ax

///////////////////////////////////////////////////////////////////////////////
/// \brief Export to global namespace.
///
///////////////////////////////////////////////////////////////////////////////
typedef Ax::TString FString;
